#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <MFRC522.h>
#include <EEPROM.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define OLED_DC 4
#define OLED_CS 5

#define RST_PIN 9
#define SS_PIN 10

#define LED_REGISTRO 7      // LED para indicar el registro de una tarjeta
#define LED_ELIMINACION 6   // LED para indicar la eliminación de una tarjeta

MFRC522 mfrc522(SS_PIN, RST_PIN);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &SPI, OLED_DC, OLED_RESET, OLED_CS);

#define MAX_REGISTROS 10
#define EEPROM_START_ADDRESS 0 // Dirección de inicio en la EEPROM

String registros[MAX_REGISTROS];
int numRegistros = 0;

void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();

  pinMode(LED_REGISTRO, OUTPUT);
  pinMode(LED_ELIMINACION, OUTPUT);
  digitalWrite(LED_REGISTRO, LOW);
  digitalWrite(LED_ELIMINACION, LOW);

  if (!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println("Error al inicializar OLED");
    while (true);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  displayTextCentered("Esperando Tarjeta", 16);
  display.display();

  // Cargar datos desde la EEPROM
  loadFromEEPROM();

  // Mostrar tarjetas registradas en el Serial
  Serial.println("Tarjetas registradas:");
  if (numRegistros == 0) {
    Serial.println("No hay tarjetas registradas.");
  } else {
    for (int i = 0; i < numRegistros; i++) {
      Serial.println(registros[i]);
    }
  }
}

void loop() {
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uidLeida = "";

    for (byte i = 0; i < mfrc522.uid.size; i++) {
      uidLeida += String(mfrc522.uid.uidByte[i], HEX);
    }
    uidLeida.toUpperCase();

    bool tarjetaRegistrada = false;
    for (int i = 0; i < numRegistros; i++) {
      if (registros[i] == uidLeida) {
        tarjetaRegistrada = true;
        break;
      }
    }

    if (!tarjetaRegistrada && numRegistros < MAX_REGISTROS) {
      registros[numRegistros] = uidLeida;
      numRegistros++;
      saveToEEPROM(); // Guardar en la EEPROM
      digitalWrite(LED_REGISTRO, HIGH);
      mostrarMensajeOLED("Tarjeta Registrada");
      delay(1000);
      mostrarMensajeOLED(":)");
      delay(600);
      digitalWrite(LED_REGISTRO, LOW);

      Serial.println(uidLeida);
    } else if (tarjetaRegistrada) {
      for (int i = 0; i < numRegistros; i++) {
        if (registros[i] == uidLeida) {
          for (int j = i; j < numRegistros - 1; j++) {
            registros[j] = registros[j + 1];
          }
          numRegistros--;
          saveToEEPROM(); // Guardar en la EEPROM
          break;
        }
      }
      digitalWrite(LED_ELIMINACION, HIGH);
      mostrarMensajeOLED("Tarjeta Eliminada");
      delay(1000);
      mostrarMensajeOLED(":(");
      delay(600);
      digitalWrite(LED_ELIMINACION, LOW);

      Serial.println(uidLeida);
    }

    display.clearDisplay();
    displayTextCentered("Esperando Tarjeta", 16);
    display.display();

    delay(1000);
  }
}

void mostrarMensajeOLED(const char* mensaje) {
  display.clearDisplay();
  displayTextCentered(mensaje, 30);
  display.display();
}

void displayTextCentered(const char* text, int16_t y) {
  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(text, 0, 0, &x1, &y1, &w, &h);
  int16_t x = (SCREEN_WIDTH - w) / 2;
  display.setCursor(x, y);
  display.println(text);
}


void saveToEEPROM() {
  EEPROM.write(EEPROM_START_ADDRESS, numRegistros); // Guarda la cantidad de registros

  for (int i = 0; i < numRegistros; i++) {
    int address = EEPROM_START_ADDRESS + 1 + i * 17; // Calcula la dirección para cada UID (16 bytes + 1 byte para el largo del string)
    EEPROM.write(address, registros[i].length()); // Guarda el largo del string
    for (int j = 0; j < registros[i].length(); j++) {
      EEPROM.write(address + 1 + j, registros[i][j]); // Guarda cada caracter del string
    }
  }
}

void loadFromEEPROM() {
  numRegistros = EEPROM.read(EEPROM_START_ADDRESS); // Lee la cantidad de registros

  if (numRegistros > MAX_REGISTROS) {
    numRegistros = 0; // Evita leer basura si el valor es incorrecto
  }

  for (int i = 0; i < numRegistros; i++) {
    int address = EEPROM_START_ADDRESS + 1 + i * 17;
    int len = EEPROM.read(address); // Lee el largo del string
    if (len > 16) len = 16; // Limita el largo para evitar problemas.

    registros[i] = "";
    for (int j = 0; j < len; j++) {
      registros[i] += (char)EEPROM.read(address + 1 + j); // Lee cada caracter
    }
  }
}
