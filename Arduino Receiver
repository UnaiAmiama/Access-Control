//You can edit o delete the leds pins but do not change SS_PIN and RST_PIN

#include <SPI.h>
#include <MFRC522.h>
#include <EEPROM.h>
#include <Servo.h>  // Biblioteca para el servo

#define RST_PIN 9
#define SS_PIN 10

#define LV 2  // LED para indicar el registro de una tarjeta
#define LR 4  // LED para indicar la eliminación de una tarjeta
#define BUZZER_PIN 8 // Pin del buzzer
#define SERVO_PIN 7  // Pin del servo

MFRC522 mfrc522(SS_PIN, RST_PIN);

#define MAX_REGISTROS 10
#define EEPROM_START_ADDRESS 0 // Dirección de inicio en la EEPROM

String registros[MAX_REGISTROS];
int numRegistros = 0;

Servo servo;  // Objeto Servo

bool esperandoUIDESP32 = false;  // Flag para saber si estamos esperando UID del ESP32

void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init(); // Inicialización del MFRC522 desde el código de prueba

  pinMode(LV, OUTPUT);
  pinMode(LR, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT); // Definir el buzzer como salida
  digitalWrite(LV, LOW);
  digitalWrite(LR, LOW);
  digitalWrite(BUZZER_PIN, LOW); // Asegurarse de que el buzzer esté apagado inicialmente

  // Inicialización del servo
  servo.attach(SERVO_PIN); // Conectar el servo al pin definido
  servo.write(0); // Colocar el servo en la posición inicial (cerrado en 0º)

  // Cargar datos desde la EEPROM
  loadFromEEPROM();

  // Mostrar tarjetas registradas en el Serial
  Serial.println("Tarjetas permitidas:");
  if (numRegistros == 0) {
    Serial.println("No hay tarjetas registradas.");
  } else {
    for (int i = 0; i < numRegistros; i++) {
      Serial.println(registros[i]); // Mostrar las UID de las tarjetas permitidas
    }
  }
}

void loop() {
  // Verificar si estamos esperando una UID del ESP32
  if (Serial.available() && !esperandoUIDESP32) {
    String uidLeida = Serial.readStringUntil('\n');
    uidLeida.trim(); // Limpiar los saltos de línea u otros caracteres no deseados
    uidLeida.toUpperCase();

    // Verificar si la tarjeta ya está registrada
    bool tarjetaRegistrada = false;
    int indice = -1;
    for (int i = 0; i < numRegistros; i++) {
      if (registros[i] == uidLeida) {
        tarjetaRegistrada = true;
        indice = i;
        break;
      }
    }

    // Si la tarjeta está registrada, eliminarla
    if (tarjetaRegistrada) {
      // Eliminar la tarjeta de la lista de registros
      for (int i = indice; i < numRegistros - 1; i++) {
        registros[i] = registros[i + 1];
      }
      numRegistros--;
      saveToEEPROM();  // Guardar los cambios en la EEPROM
      Serial.println("Tarjeta eliminada");
    } 
    // Si no está registrada, agregarla
    else if (numRegistros < MAX_REGISTROS) {
      registros[numRegistros] = uidLeida;
      numRegistros++;
      saveToEEPROM();  // Guardar los cambios en la EEPROM
      Serial.println("Tarjeta agregada");
    }
    // Si ya están las 10 tarjetas registradas
    else {
      Serial.println("Número máximo de tarjetas registradas alcanzado");
    }
  }

  // Comprobar si se escanea una tarjeta con el MFRC522
  if (!esperandoUIDESP32 && mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uidLeida = "";

    for (byte i = 0; i < mfrc522.uid.size; i++) {
      uidLeida += String(mfrc522.uid.uidByte[i], HEX);
    }
    uidLeida.toUpperCase();

    // Verificar si la tarjeta está registrada
    bool tarjetaRegistrada = false;
    for (int i = 0; i < numRegistros; i++) {
      if (registros[i] == uidLeida) {
        tarjetaRegistrada = true;
        break;
      }
    }

    // Si la tarjeta está registrada
    if (tarjetaRegistrada) {
      digitalWrite(LV, HIGH); // Tarjeta permitida, encender LED de registro
      tone(BUZZER_PIN, 1000, 300); // Sonido corto del buzzer (300ms)
      servo.write(180); // Abrir la puerta (mover el servo a 180º)
      delay(300); // Espera reducida (300ms)
      servo.write(0); // Volver a 0º (cerrar la puerta)
      delay(300); // Espera reducida (300ms)
      digitalWrite(LV, LOW);
      Serial.println("Acceso permitido");
    } else {
      digitalWrite(LR, HIGH); // Tarjeta no permitida, encender LED de eliminación
      tone(BUZZER_PIN, 500, 700); // Sonido largo del buzzer (700ms)
      servo.write(0); // Cerrar la puerta (mover el servo a 0º)
      delay(300); // Espera reducida (300ms)
      digitalWrite(LR, LOW);
      Serial.println("Acceso denegado");
    }
  }

  delay(100); // Tiempo de espera mínimo para evitar sobrecargar la CPU
}

void saveToEEPROM() {
  EEPROM.write(EEPROM_START_ADDRESS, numRegistros); // Guarda la cantidad de registros

  for (int i = 0; i < numRegistros; i++) {
    int address = EEPROM_START_ADDRESS + 1 + i * 17; // Calcula la dirección para cada UID (16 bytes + 1 byte para el largo del string)
    EEPROM.write(address, registros[i].length()); // Guarda el largo del string
    for (int j = 0; j < registros[i].length(); j++) {
      EEPROM.write(address + 1 + j, registros[i][j]); // Guarda cada caracter del string
    }
  }
}

void loadFromEEPROM() {
  numRegistros = EEPROM.read(EEPROM_START_ADDRESS); // Lee la cantidad de registros

  if (numRegistros > MAX_REGISTROS) {
    numRegistros = 0; // Evita leer basura si el valor es incorrecto
  }

  for (int i = 0; i < numRegistros; i++) {
    int address = EEPROM_START_ADDRESS + 1 + i * 17;
    int len = EEPROM.read(address); // Lee el largo del string
    if (len > 16) len = 16; // Limita el largo para evitar problemas.

    registros[i] = "";
    for (int j = 0; j < len; j++) {
      registros[i] += char(EEPROM.read(address + 1 + j)); // Lee cada caracter del string
    }
  }
}
